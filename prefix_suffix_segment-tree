#include<bits/stdc++.h>
using namespace std;

struct node{
	int prefix,suffix,max_sum,total;
	
	node()
	{
		prefix=0;
		suffix=0;
		max_sum=0;
		total=0;
	}
};




node merge(node left , node right)
{
	node parent;
	
	parent.prefix=max(left.prefix , left.total + right.prefix);
	
	parent.suffix = max(right.suffix , right.total + left.suffix);
	
	parent.total = left.total + right.total;
	
	parent.max_sum= max(left.max_sum,max( right.max_sum , left.suffix + right.prefix));
	
	return parent;
}

void built(vector<int> v, vector<node> &root , int nd, int low , int high)
{
	if(low==high)
	{
		root[nd].total=v[low];
		root[nd].prefix=v[low];
		root[nd].suffix=v[low];
		root[nd].max_sum=v[low];
		return;
	}
	int mid=low + (high-low)/2;
	built(v,root, 2 * nd+1, low , mid  );
	built(v , root  , 2 * nd +2, mid+1, high);
	root[nd]=merge(root[2 * nd+1], root[2 *nd +2]);
}

node  find(int l , int r, vector<node>root, int low , int high, int n)
{
	if(low>r || high<l)
	{
		node nullnode;
		return nullnode;
	}
	if(low>=l && high<=r)
	return root[n];
	
	int mid=low + (high-low)/2;
	node left=find(l,r,root,low,mid,2 * n+1);
	
	node right=find(l,r,root,mid+1,high,2 * n+2);
	
	node res= merge(left, right);
	return res;
}

int query(int l , int r,  vector<node> root, int n)
{
	int low=0;
	int high=n-1;
	node ans=find(l, r, root, low, high, 1);
	return ans.max_sum;	
}

int main()
{
	int n,t,i,j,k;
	cin>>t;
	while(t--)
	{
		cin>>n;
		vector<int> a(n);
		for(i=0;i<n;i++)
			cin>>a[i];
		vector<node> root(4 * n+2);	
		built(a,root, 1, 0 , n-1);
		for(i=0;i<root.size();i++)
		if(root[i].max_sum!=INT_MIN)
		cout<<root[i].max_sum<<" ";
		for(i=0;i<3;i++)
		{
		cout<<"Enter range\n";
		int x ,y;
		cin>>x>>y;	
		cout<<query(x , y , root, n)<<" ";
		}
	}
	return 0;
}
