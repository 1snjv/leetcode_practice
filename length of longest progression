https://www.geeksforgeeks.org/longest-arithmetic-progression-dp-35/

int Solution::solve(const vector<int> &arr) {
    int n =arr.size();
    if(!n)
        return 0;
    vector<int> A=arr;
    vector<vector<int>>dp(n,vector<int>(n,0));
    for(int i=0;i<n;i++)
        dp[i][n-1]=2;
    int mx = 2;
    if(n==1)
        mx = 1;
    sort(A.begin(),A.end());
    for(int i=n-2;i>=1;i--)
    {
        int j=i-1,k=i+1;
        while(j>=0 && k<n)
        {
            if(A[j]+A[k]<2 * A[i])
            {
                k++;
            }
            else if(A[j]+A[k]>2 * A[i])
            {
                dp[j][i]=2;
                j--;    
            }
            else
            {
                dp[j][i]=dp[i][k]+1;
                mx=  max(dp[j][i],mx);
                j--,k++;
            }
        }
        while(j>=0)
            {
                dp[j][i]=2;
                j--;
            }
    }
    return mx;
}
